Bournemouth NewcastleWolverhamptonWanderers TottenhamHotspurManchesterUnited LutonArsenal BurnleyRealMadrid ValenciaLecce ACMilanJuventus CagliariBayernMunich 1.FCHeidenheim1846Reims ParisSaint-GermainCrystalPalace EvertonStuttgart BorussiaDortmundRayoVallecano GironaAlmeria RealSociedadLeHavre Monacoimport dashfrom dash import html, dcc, callbackfrom dash.dependencies import Input, Output, Stateimport pandas as pdfrom sklearn.ensemble import RandomForestRegressorimport joblibimport time# Load the transformed DataFrame (replace with your data source)file_path = "C:/Users/USER/OneDrive/Desktop/data analysis/Python/bigdata/transformed_data.xlsx"transformed_df = pd.read_excel(file_path)# Columns to be used for predictionselected_columns = ['Average_Goals_Scored', 'Average_Goals_Conceded', 'Elo Rating']# Load the trained modelmodel = joblib.load('model')  # Replace 'model' with the actual filename of your saved model# Initialize the Dash appapp = dash.Dash(__name__)# Define the layout of the appapp.layout = html.Div([    html.Div([        html.Div([            dcc.Textarea(                id='teams-textareas',                placeholder='Enter games (Team1 Team2), one per line',                rows=7,                style={'width': '100%', 'margin': '0 auto', 'display': 'block'}            ),            html.Button('Predict TotalGoals', id='predict-goals-button', n_clicks=0,                        style={'background-color': '#0074D9', 'color': 'white', 'border': 'none',                               'border-radius': '5px', 'padding': '10px 20px', 'cursor': 'pointer',                               'margin': '0 auto', 'display': 'block'}),            html.Div(id='output-prediction-goals', style={'text-align': 'center'}),        ]),    ]),])# Define the callback to make predictions for TotalGoals@app.callback(    [Output('output-prediction-goals', 'children'),     Output('loading-goals', 'children')],    [Input('predict-goals-button', 'n_clicks')],    [State('teams-textareas', 'value')])def predict_total_goals(n_clicks, teams_textarea):    loading_output = html.Div()    prediction_output = None        if n_clicks > 0:        loading_output = [            html.Div("Calculating", style={'color': 'red', 'height': '10px', 'font-size': '16px', 'transition': 'color 10s'}),            html.Div("Calculating", style={'color': 'yellow', 'height': '10px', 'font-size': '16px', 'transition': 'color 10s'}),            html.Div("Calculating", style={'color': 'green', 'height': '10px', 'font-size': '16px', 'transition': 'color 10s'}),        ]        # Parse input text area value to get team names        team_lines = teams_textarea.strip().split('\n')        teams = [line.split() for line in team_lines]        # Create a DataFrame with the teams and their statistics        team_data = pd.DataFrame()        over_25_predictions = pd.DataFrame(columns=['Team1', 'Team2', 'Prediction_Result'])  # To store Over 2.5 predictions        for team1, team2 in teams:            team1_data = transformed_df[transformed_df['Team'] == team1][selected_columns]            team2_data = transformed_df[transformed_df['Team'] == team2][selected_columns]            team2_data['Opponent_Strength'] = team2_data['Elo Rating'].mean()            team2_data.drop(['Elo Rating'], axis=1, inplace=True)            team2_data.columns = ['Average_Goals_Scored_Opponent', 'Average_Goals_Conceded_Opponent', 'Opponent_Strength']            input_data = pd.concat([team1_data.mean(), team2_data.mean()]).to_frame().T            # Adjust predicted_total_goals by subtracting 1.2            predicted_total_goals = model.predict(input_data)[0] - 1.2            # Sum of average goals scored and average goals scored by the opponent            sum_of_goals = input_data['Average_Goals_Scored'].values[0] + input_data['Average_Goals_Scored_Opponent'].values[0]            # Determine the prediction result            if sum_of_goals > predicted_total_goals:                prediction_result = "Over 2.5"                over_25_predictions = pd.concat([over_25_predictions, pd.DataFrame({'Team1': [team1], 'Team2': [team2], 'Prediction_Result': [prediction_result]})])            else:                prediction_result = "Not Certain"            team_data = pd.concat([team_data, pd.DataFrame({'Team1': [team1], 'Team2': [team2], 'Prediction_Result': [prediction_result]})])        # Display Over 2.5 predictions if there is at least one, otherwise display all "Not Certain" predictions        if not over_25_predictions.empty:            prediction_output = generate_table(over_25_predictions)        else:            prediction_output = generate_table(team_data)    return prediction_output, loading_output# Helper function to generate a Dash table from a DataFramedef generate_table(dataframe, max_rows=10):    return html.Table(                # Header        [html.Tr([html.Th(col, style={'border-bottom': '2px solid black'}) for col in dataframe.columns])] +        [html.Tr([html.Td(dataframe.iloc[i][col]) for col in dataframe.columns]) for i in range(min(len(dataframe), max_rows))]    )# Run the appif __name__ == '__main__':    app.run_server(debug=True)